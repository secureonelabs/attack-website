{"description": "Mobile techniques used by Application Vetting, ATT&CK mitigation M1005 v1.0", "name": "Application Vetting (M1005)", "domain": "mobile-attack", "versions": {"layer": "4.2", "attack": "10", "navigator": "4.3"}, "techniques": [{"score": 1, "techniqueID": "T1435", "showSubtechniques": false, "comment": "On Android, accessing device calendar data requires that the app hold the READ_CALENDAR permission. Apps that request this permission could be closely scrutinized to ensure that the request is appropriate. On iOS, the app vetting process can determine whether apps access device calendar data, with extra scrutiny applied to any that do so."}, {"score": 1, "techniqueID": "T1433", "showSubtechniques": false, "comment": "On Android, accessing the device call log requires that the app hold the READ_CALL_LOG permission. Apps that request this permission could be closely scrutinized to ensure that the request is appropriate."}, {"score": 1, "techniqueID": "T1432", "showSubtechniques": false, "comment": "On Android, accessing the device contact list requires that the app hold the READ_CONTACTS permission. Apps that request this permission could be closely scrutinized to ensure that the request is appropriate. On iOS, the app vetting process can determine whether apps access the device contact list, with extra scrutiny applied to any that do so."}, {"score": 1, "techniqueID": "T1409", "showSubtechniques": false, "comment": "Ensure applications do not store data in an insecure fashion, such as in unprotected external storage, without acknowledging the risk that the data can potentially be accessed or modified by other applications."}, {"score": 1, "techniqueID": "T1418", "showSubtechniques": false, "comment": "Application vetting techniques could search for use of the Android PackageManager class to enumerate other apps, and such applications could have extra scrutiny applied to them. However, this technique may not be practical if many apps invoke these methods as part of their legitimate behavior. On iOS, application vetting techniques could similarly search for use of the private API call necessary to obtain a list of apps installed on the device. Additionally, on iOS, use of the private API call is likely to result in the app not being accepted into Apple's App Store."}, {"score": 1, "techniqueID": "T1616", "showSubtechniques": false, "comment": "Application vetting services could provide further scrutiny to applications that request permissions related to phone calls."}, {"score": 1, "techniqueID": "T1429", "showSubtechniques": false, "comment": "Applications using the android permission `android.permission.RECORD_AUDIO` or iOS applications using `RequestRecordPermission` could be more closely scrutinized and monitored. If `android.permission.CAPTURE_AUDIO_OUTPUT` is found in a third-party application, it should be heavily scrutinized."}, {"score": 1, "techniqueID": "T1512", "showSubtechniques": false, "comment": "During the vetting process applications using the android permission `android.permission.CAMERA`, or the iOS `NSCameraUsageDescription` plist entry could be analyzed more closely."}, {"score": 1, "techniqueID": "T1414", "showSubtechniques": false, "comment": "Applications could be vetted for their use of the clipboard manager APIs with extra scrutiny given to application that make use of them."}, {"score": 1, "techniqueID": "T1412", "showSubtechniques": false, "comment": "Enterprises performing application vetting could search for applications that declare the RECEIVE_SMS permission and scrutinize them closely."}, {"score": 1, "techniqueID": "T1448", "showSubtechniques": false, "comment": "Application vetting services can check for applications that request SMS permissions, and can provide extra scrutiny to those that do."}, {"score": 1, "techniqueID": "T1510", "showSubtechniques": false, "comment": "Applications could be vetted for their use of the clipboard manager APIs with extra scrutiny given to application that make use of them."}, {"score": 1, "techniqueID": "T1540", "showSubtechniques": false, "comment": "Static or dynamic code analysis to look for misuse of dynamic libraries. Increased focus on applications utilizing `DexClassLoader`. "}, {"score": 1, "techniqueID": "T1605", "showSubtechniques": false, "comment": "Application vetting services could detect invocations of methods that could be used to execute shell commands."}, {"score": 1, "techniqueID": "T1577", "showSubtechniques": false, "comment": "Application vetting services could look for attempted usage of the Janus vulnerability."}, {"score": 1, "techniqueID": "T1471", "showSubtechniques": false, "comment": "A static analysis approach may be able to identify ransomware apps that encrypt user files on the device.(Citation: Maggi-Ransomware)"}, {"score": 1, "techniqueID": "T1447", "showSubtechniques": false, "comment": "Application vetting services could be extra scrutinous of applications that request device administrator permissions."}, {"score": 1, "techniqueID": "T1475", "showSubtechniques": false, "comment": "App store operators and enterprises could assess reputational characteristics of the app, including the popularity of the app or other apps from the same developer and whether or not security issues have been found in other apps from the same developer."}, {"score": 1, "techniqueID": "T1401", "showSubtechniques": false, "comment": "Application vetting can check for the string `BIND_DEVICE_ADMIN` in the application\u2019s manifest."}, {"score": 1, "techniqueID": "T1446", "showSubtechniques": false, "comment": "It is rare for applications to utilize Device Administrator access. App vetting can detect apps that do so, and those apps should be closely scrutinized. A static analysis approach can be used to identify ransomware apps including apps that abuse Device Administrator access.(Citation: Maggi-Ransomware)"}, {"score": 1, "techniqueID": "T1407", "showSubtechniques": false, "comment": "Application vetting techniques could (either statically or dynamically) look for indications that the application downloads and executes new code at runtime (e.g., on Android use of DexClassLoader, System.load, or the WebView JavaScriptInterface capability, or on iOS use of JSPatch or similar capabilities). Unfortunately, this is only a partial mitigation, as additional scrutiny would still need to be applied to applications that use these techniques, as the techniques are often used without malicious intent, and because applications may employ other techniques such as to hide their use of these techniques."}, {"score": 1, "techniqueID": "T1523", "showSubtechniques": false, "comment": "Applications attempting to get `android.os.SystemProperties` or `getprop` with the runtime `exec()` commands should be closely scrutinized. Google does not recommend the use of system properties within applications."}, {"score": 1, "techniqueID": "T1404", "showSubtechniques": false, "comment": "Application vetting may be able to identify the presence of exploit code within applications."}, {"score": 1, "techniqueID": "T1541", "showSubtechniques": false, "comment": "Applications could be vetted for their use of the `startForeground()` API, and could be further scrutinized if usage is found."}, {"score": 1, "techniqueID": "T1581", "showSubtechniques": false, "comment": "Application vetting services can detect unnecessary and potentially abused location permissions or API calls."}, {"score": 1, "techniqueID": "T1617", "showSubtechniques": false, "comment": "Application vetting services could look for attempts to invoke the superuser (su) binary or modules related to rooting frameworks."}, {"score": 1, "techniqueID": "T1417", "showSubtechniques": false, "comment": "Applications that attempt to register themselves as a device keyboard or request the `android.permission.BIND_ACCESSIBILITY_SERVICE` permission in a service declaration should be closely scrutinized during the vetting process."}, {"score": 1, "techniqueID": "T1516", "showSubtechniques": false, "comment": "Applications that register an accessibility service should be scrutinized further for malicious behavior."}, {"score": 1, "techniqueID": "T1579", "showSubtechniques": false, "comment": "Application vetting services may be able to detect known privilege escalation exploits contained within applications."}, {"score": 1, "techniqueID": "T1430", "showSubtechniques": false, "comment": "On Android, applications must request the ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission to access the device's physical location. Extra scrutiny could be given to applications that request these permissions. On iOS, calls to the relevant APIs could be detected during the vetting process."}, {"score": 1, "techniqueID": "T1463", "showSubtechniques": false, "comment": "Application vetting techniques can scan for use of cleartext communication, insecure TrustManager implementations, and other potential network communication weaknesses. The Google Play Store now automatically assesses submitted applications for insecure TrustManager implementations.(Citation: Google-TrustManager)"}, {"score": 1, "techniqueID": "T1575", "showSubtechniques": false, "comment": "Application vetting services could look for the `native` keyword in function definitions. However, this is widely used for legitimate purposes, so this may not be feasible. Application vetting services may also be able to detect behaviors carried out through the Native Development Kit (NDK) via dynamic analysis."}, {"score": 1, "techniqueID": "T1410", "showSubtechniques": false, "comment": "Closely scrutinize applications that request VPN access before allowing their use."}, {"score": 1, "techniqueID": "T1406", "showSubtechniques": false, "comment": "Application vetting techniques may be able to alert to the presence of obfuscated or encrypted code in applications, and such applications could have extra scrutiny applied. Unfortunately, this mitigation is likely impractical, as many legitimate applications apply code obfuscation or encryption to resist adversary techniques such as Repackaged Application. Dynamic analysis when used in application vetting may in some cases be able to identify malicious code in obfuscated or encrypted form by detecting the code at execution time (after it is deobfuscated or decrypted). Some application vetting techniques apply reputation analysis of the application developer and can alert to potentially suspicious applications without actual examination of application code."}, {"score": 1, "techniqueID": "T1424", "showSubtechniques": false, "comment": "Application vetting techniques could be used to attempt to identify applications with this behavior."}, {"score": 1, "techniqueID": "T1544", "showSubtechniques": false, "comment": "Applications with network connections to unknown domains or IP addresses could be further scrutinized to detect unauthorized file copying. Further, some application vetting services may indicate precisely what content was requested during application execution."}, {"score": 1, "techniqueID": "T1513", "showSubtechniques": false, "comment": "Applications can be vetted for their use of the Android MediaProjectionManager class, with extra scrutiny applied to any application that uses the class."}, {"score": 1, "techniqueID": "T1582", "showSubtechniques": false, "comment": "Application vetting services could provide further scrutiny to applications that request SMS-based permissions."}, {"score": 1, "techniqueID": "T1426", "showSubtechniques": false, "comment": "App vetting procedures can search for apps that use the android.os.Build class, but these procedures could potentially be evaded and are likely not practical in this case, as many apps are likely to use this functionality as part of their legitimate behavior."}, {"score": 1, "techniqueID": "T1422", "showSubtechniques": false, "comment": "Application vetting could be used to analyze applications to determine whether they access this information, including determining whether the application requests the Android ACCESS_NETWORK_STATE permission (required in order to access NetworkInterface information) or the READ_PHONE_STATE permission (required in order to access TelephonyManager information)."}, {"score": 1, "techniqueID": "T1421", "showSubtechniques": false, "comment": "During application vetting, applications could be examined to see if they have this behavior, and extra scrutiny could potentially be given to applications that do."}, {"score": 1, "techniqueID": "T1509", "showSubtechniques": false, "comment": "Application vetting reports may show network communications performed by the application, including hosts, ports, protocols, and URLs."}, {"score": 1, "techniqueID": "T1576", "showSubtechniques": false, "comment": "Application vetting services could look for use of the accessibility service or features that typically require root access."}, {"score": 1, "techniqueID": "T1416", "showSubtechniques": false, "comment": "When vetting applications for potential security weaknesses, the vetting process could look for insecure use of intents. Developers should be encouraged to use techniques to ensure that the intent can only be sent to an appropriate destination (e.g., use explicit rather than implicit intents, permission checking, checking of the destination app's signing certificate, or the App Links feature added in Android 6.0). For mobile applications using OAuth, encourage use of best practice.(Citation: IETF-OAuthNativeApps)(Citation: Android-AppLinks)"}, {"score": 1, "techniqueID": "T1618", "showSubtechniques": false, "comment": "Application vetting services could look for usage of the `SensorManager` class, indicating that the application is attempting to access device sensors."}], "gradient": {"colors": ["#ffffff", "#66b1ff"], "minValue": 0, "maxValue": 1}, "legendItems": [{"label": "used by Application Vetting", "color": "#66b1ff"}]}